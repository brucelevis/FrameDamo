// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class OneFrameMessage : pb::IMessage {
    private static readonly pb::MessageParser<OneFrameMessage> _parser = new pb::MessageParser<OneFrameMessage>(() => new OneFrameMessage());
    public static pb::MessageParser<OneFrameMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int op_;
    public int Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    private pb::ByteString aMessage_ = pb::ByteString.Empty;
    public pb::ByteString AMessage {
      get { return aMessage_; }
      set {
        aMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Op);
      }
      if (AMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AMessage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
      }
      if (AMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AMessage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      op_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadInt32();
            break;
          }
          case 18: {
            AMessage = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FrameMessage : pb::IMessage {
    private static readonly pb::MessageParser<FrameMessage> _parser = new pb::MessageParser<FrameMessage>(() => new FrameMessage());
    public static pb::MessageParser<FrameMessage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.OneFrameMessage> _repeated_message_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.OneFrameMessage.Parser);
    private pbc::RepeatedField<global::ETModel.OneFrameMessage> message_ = new pbc::RepeatedField<global::ETModel.OneFrameMessage>();
    public pbc::RepeatedField<global::ETModel.OneFrameMessage> Message {
      get { return message_; }
      set { message_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      message_.WriteTo(output, _repeated_message_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      size += message_.CalculateSize(_repeated_message_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      message_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            message_.AddEntriesFrom(input, _repeated_message_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FSPParam : pb::IMessage {
    private static readonly pb::MessageParser<FSPParam> _parser = new pb::MessageParser<FSPParam>(() => new FSPParam());
    public static pb::MessageParser<FSPParam> Parser { get { return _parser; } }

    private string host_ = "";
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int port_;
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    private uint sid_;
    public uint Sid {
      get { return sid_; }
      set {
        sid_ = value;
      }
    }

    private int serverFrameInterval_;
    public int ServerFrameInterval {
      get { return serverFrameInterval_; }
      set {
        serverFrameInterval_ = value;
      }
    }

    private int serverTimeout_;
    public int ServerTimeout {
      get { return serverTimeout_; }
      set {
        serverTimeout_ = value;
      }
    }

    private int clientFrameRateMultiple_;
    public int ClientFrameRateMultiple {
      get { return clientFrameRateMultiple_; }
      set {
        clientFrameRateMultiple_ = value;
      }
    }

    private bool enableSpeedUp_;
    public bool EnableSpeedUp {
      get { return enableSpeedUp_; }
      set {
        enableSpeedUp_ = value;
      }
    }

    private int defaultSpeed_;
    public int DefaultSpeed {
      get { return defaultSpeed_; }
      set {
        defaultSpeed_ = value;
      }
    }

    private int frameBufferSize_;
    public int FrameBufferSize {
      get { return frameBufferSize_; }
      set {
        frameBufferSize_ = value;
      }
    }

    private bool enableAutoBuffer_;
    public bool EnableAutoBuffer {
      get { return enableAutoBuffer_; }
      set {
        enableAutoBuffer_ = value;
      }
    }

    private int maxFrameId_;
    public int MaxFrameId {
      get { return maxFrameId_; }
      set {
        maxFrameId_ = value;
      }
    }

    private bool useLocal_;
    public bool UseLocal {
      get { return useLocal_; }
      set {
        useLocal_ = value;
      }
    }

    private int authId_;
    public int AuthId {
      get { return authId_; }
      set {
        authId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Sid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Sid);
      }
      if (ServerFrameInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerFrameInterval);
      }
      if (ServerTimeout != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerTimeout);
      }
      if (ClientFrameRateMultiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientFrameRateMultiple);
      }
      if (EnableSpeedUp != false) {
        output.WriteRawTag(56);
        output.WriteBool(EnableSpeedUp);
      }
      if (DefaultSpeed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefaultSpeed);
      }
      if (FrameBufferSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrameBufferSize);
      }
      if (EnableAutoBuffer != false) {
        output.WriteRawTag(80);
        output.WriteBool(EnableAutoBuffer);
      }
      if (MaxFrameId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxFrameId);
      }
      if (UseLocal != false) {
        output.WriteRawTag(96);
        output.WriteBool(UseLocal);
      }
      if (AuthId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AuthId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Sid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sid);
      }
      if (ServerFrameInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerFrameInterval);
      }
      if (ServerTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTimeout);
      }
      if (ClientFrameRateMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientFrameRateMultiple);
      }
      if (EnableSpeedUp != false) {
        size += 1 + 1;
      }
      if (DefaultSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultSpeed);
      }
      if (FrameBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameBufferSize);
      }
      if (EnableAutoBuffer != false) {
        size += 1 + 1;
      }
      if (MaxFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFrameId);
      }
      if (UseLocal != false) {
        size += 1 + 1;
      }
      if (AuthId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      host_ = "";
      port_ = 0;
      sid_ = 0;
      serverFrameInterval_ = 0;
      serverTimeout_ = 0;
      clientFrameRateMultiple_ = 0;
      enableSpeedUp_ = false;
      defaultSpeed_ = 0;
      frameBufferSize_ = 0;
      enableAutoBuffer_ = false;
      maxFrameId_ = 0;
      useLocal_ = false;
      authId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            Sid = input.ReadUInt32();
            break;
          }
          case 32: {
            ServerFrameInterval = input.ReadInt32();
            break;
          }
          case 40: {
            ServerTimeout = input.ReadInt32();
            break;
          }
          case 48: {
            ClientFrameRateMultiple = input.ReadInt32();
            break;
          }
          case 56: {
            EnableSpeedUp = input.ReadBool();
            break;
          }
          case 64: {
            DefaultSpeed = input.ReadInt32();
            break;
          }
          case 72: {
            FrameBufferSize = input.ReadInt32();
            break;
          }
          case 80: {
            EnableAutoBuffer = input.ReadBool();
            break;
          }
          case 88: {
            MaxFrameId = input.ReadInt32();
            break;
          }
          case 96: {
            UseLocal = input.ReadBool();
            break;
          }
          case 104: {
            AuthId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class FSPVKey : pb::IMessage {
    private static readonly pb::MessageParser<FSPVKey> _parser = new pb::MessageParser<FSPVKey>(() => new FSPVKey());
    public static pb::MessageParser<FSPVKey> Parser { get { return _parser; } }

    private int vkey_;
    public int Vkey {
      get { return vkey_; }
      set {
        vkey_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_args_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> args_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Args {
      get { return args_; }
      set { args_ = value; }
    }

    private uint playerIdOrClientFrameId_;
    public uint PlayerIdOrClientFrameId {
      get { return playerIdOrClientFrameId_; }
      set {
        playerIdOrClientFrameId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Vkey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vkey);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (PlayerIdOrClientFrameId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayerIdOrClientFrameId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Vkey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vkey);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (PlayerIdOrClientFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerIdOrClientFrameId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      vkey_ = 0;
      args_.Clear();
      playerIdOrClientFrameId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Vkey = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 24: {
            PlayerIdOrClientFrameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class FSPDataC2S : pb::IMessage {
    private static readonly pb::MessageParser<FSPDataC2S> _parser = new pb::MessageParser<FSPDataC2S>(() => new FSPDataC2S());
    public static pb::MessageParser<FSPDataC2S> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private uint sid_;
    public uint Sid {
      get { return sid_; }
      set {
        sid_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.FSPVKey> _repeated_vkeys_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.FSPVKey.Parser);
    private pbc::RepeatedField<global::ETModel.FSPVKey> vkeys_ = new pbc::RepeatedField<global::ETModel.FSPVKey>();
    public pbc::RepeatedField<global::ETModel.FSPVKey> Vkeys {
      get { return vkeys_; }
      set { vkeys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Sid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sid);
      }
      vkeys_.WriteTo(output, _repeated_vkeys_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Sid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sid);
      }
      size += vkeys_.CalculateSize(_repeated_vkeys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sid_ = 0;
      vkeys_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sid = input.ReadUInt32();
            break;
          }
          case 18: {
            vkeys_.AddEntriesFrom(input, _repeated_vkeys_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FSPDataS2C : pb::IMessage {
    private static readonly pb::MessageParser<FSPDataS2C> _parser = new pb::MessageParser<FSPDataS2C>(() => new FSPDataS2C());
    public static pb::MessageParser<FSPDataS2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.FSPFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.FSPFrame.Parser);
    private pbc::RepeatedField<global::ETModel.FSPFrame> frames_ = new pbc::RepeatedField<global::ETModel.FSPFrame>();
    public pbc::RepeatedField<global::ETModel.FSPFrame> Frames {
      get { return frames_; }
      set { frames_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      frames_.WriteTo(output, _repeated_frames_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frames_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FSPFrame : pb::IMessage {
    private static readonly pb::MessageParser<FSPFrame> _parser = new pb::MessageParser<FSPFrame>(() => new FSPFrame());
    public static pb::MessageParser<FSPFrame> Parser { get { return _parser; } }

    private int frameId_;
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.FSPVKey> _repeated_vkeys_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.FSPVKey.Parser);
    private pbc::RepeatedField<global::ETModel.FSPVKey> vkeys_ = new pbc::RepeatedField<global::ETModel.FSPVKey>();
    public pbc::RepeatedField<global::ETModel.FSPVKey> Vkeys {
      get { return vkeys_; }
      set { vkeys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
      vkeys_.WriteTo(output, _repeated_vkeys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      size += vkeys_.CalculateSize(_repeated_vkeys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frameId_ = 0;
      vkeys_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
          case 18: {
            vkeys_.AddEntriesFrom(input, _repeated_vkeys_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
